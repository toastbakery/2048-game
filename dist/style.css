*, *::before, *::after {
    box-sizing: border-box;
    font-family: Arial, Helvetica, sans-serif;
    margin: 0;
}

body {
    background-color: #333;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    font-size: 7.5vmin;
}

h1 {
    margin: 1vmin 0 2vmin;
    font-size: 8vmin;
    color: hsl(310, 60%, 80%);
    text-shadow: 2px 2px #232931;
}

#game-board {
    display: grid;
    grid-template-columns: repeat(var(--grid-size), var(--cell-size));
    grid-template-rows: repeat(var(--grid-size), var(--cell-size));
    background-color: #CCC;
    gap: var(--cell-gap);
    border-radius: 1vmin;  /* vmin is a unit that represents 1% of the minimum viewport dimension(width or height) */
    padding:  var(--cell-gap);
    position: relative; /*This is important if you want to position child elements using absolute or relative positioning.*/
}

.cell {
    background-color: #AAA;
    border-radius: 1vmin;
}

.tile {
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: bold;
    width: var(--cell-size);
    height: var(--cell-size);
    border-radius: 1vmin;
    top: calc(var(--y) * (var(--cell-size) + var(--cell-gap)) + var(--cell-gap));
    left: calc(var(--x) * (var(--cell-size) + var(--cell-gap)) + var(--cell-gap));
    background-color: hsl(200, 50%, var(--background-lightness));
    color: hsl(200, 20%, var(--text-lightness));
    animation: show 200ms ease-in-out;  
    /* every tile moving instead of snapping into place */
    transition: 100ms ease-in-out;   
}

@keyframes show {
    0% {
        opacity: .5;
        transform: scale(0);    /* completely scaled down */
    }
}